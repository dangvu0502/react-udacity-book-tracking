{"version":3,"sources":["BooksAPI.js","Book.js","Bookshelf.js","SearchBook.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","Book","_this","this","props","react_default","a","createElement","className","imageLinks","thumbnail","style","width","height","backgroundImage","value","onChange","event","handleMove","target","disabled","title","authors","map","author","key","Component","Bookshelf","state","currentlyReading","wantToRead","read","_this2","booksOnThisShelf","filter","BookIDsOnThisShelf","indexOf","type","src_Book","SearchBooks","react_router_dom","to","placeholder","BooksApp","shelfTypes","bookShelves","showSearchPage","getAllBooks","BooksAPI","reduce","shelfType","setState","componentDidMount","length","SearchBook","src_Bookshelf","onClick","React","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.869306b6.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React, { Component } from \"react\";\r\n\r\nclass Book extends Component {\r\n  render() {\r\n    const book = this.props.book;\r\n    return (\r\n      <div className=\"book\">\r\n        <div className=\"book-top\">\r\n          {book.imageLinks && book.imageLinks.thumbnail ? (\r\n            <div\r\n              className=\"book-cover\"\r\n              style={{\r\n                width: 128,\r\n                height: 193,\r\n                backgroundImage: `url(${book.imageLinks.thumbnail})`,\r\n              }}\r\n            />\r\n          ) : (\r\n            <div>\r\n              <p>Image Error</p>\r\n            </div>\r\n          )}\r\n          <div className=\"book-shelf-changer\">\r\n            <select value={book.shelf} onChange={(event) => this.props.handleMove(book, event.target.value)}>\r\n              <option value=\"move\" disabled>\r\n                Move to...\r\n              </option>\r\n              <option value=\"currentlyReading\">Currently Reading</option>\r\n              <option value=\"wantToRead\">Want to Read</option>\r\n              <option value=\"read\">Read</option>\r\n              <option value=\"none\">None</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"book-title\">{book.title}</div>\r\n        <div className=\"book-authors\">\r\n          {book.authors\r\n            ? book.authors.map((author) => <p key={author}>{author}</p>)\r\n            : null}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Book;\r\n","import React, { Component } from \"react\";\r\nimport Book from \"./Book\";\r\n\r\nclass Bookshelf extends Component {\r\n  state = {\r\n    title: {\r\n      currentlyReading: \"Currently Reading\",\r\n      wantToRead: \"Want to Read\",\r\n      read: \"Read\",\r\n    },\r\n  };\r\n\r\n  render() {\r\n    const booksOnThisShelf = this.props.books.filter((book) => this.props.BookIDsOnThisShelf.indexOf(book.id) !== -1);\r\n\r\n    return (\r\n      <div className=\"bookshelf\">\r\n        <h2 className=\"bookshelf-title\">{this.state.title[this.props.type]}</h2>\r\n        <div className=\"bookshelf-books\">\r\n          <ol className=\"books-grid\">\r\n            <li>\r\n            {booksOnThisShelf.map((book) => (\r\n              <Book\r\n                key={book.id}\r\n                book={book}\r\n                handleMove={this.props.handleMove}\r\n              />\r\n            ))}\r\n            </li>\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Bookshelf;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Book from \"./Book\";\r\n\r\nclass SearchBooks extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"search-books\">\r\n        <div className=\"search-books-bar\">\r\n          <Link to=\"/\" className=\"close-search\">\r\n            Close\r\n          </Link>\r\n          <div className=\"search-books-input-wrapper\">\r\n            {/*\r\n              NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n              You can find these search terms here:\r\n              https://github.com/RusPosevkin/book-tracking/blob/master/SEARCH_TERMS.md\r\n\r\n              However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n              you don't find a specific author or title. Every search is limited by search terms.\r\n            */}\r\n            <input type=\"text\" placeholder=\"Search by title or author\" />\r\n          </div>\r\n        </div>\r\n        <div className=\"search-books-results\">\r\n          <ol className=\"books-grid\">\r\n            {this.props.books.map((book) => (\r\n              <Book\r\n                key={book.id}\r\n                book={book}\r\n                handleMove={this.props.handleMove}\r\n              />\r\n            ))}\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBooks;\r\n","import React from \"react\";\r\nimport * as BooksAPI from \"./BooksAPI\";\r\nimport Bookshelf from \"./Bookshelf\";\r\nimport SearchBooks from \"./SearchBook\";\r\nimport \"./App.css\";\r\n\r\nclass BooksApp extends React.Component {\r\n  state = {\r\n    books: [],\r\n    shelfTypes: [\"currentlyReading\", \"wantToRead\", \"read\"],\r\n    bookShelves: {},\r\n    showSearchPage: false,\r\n  };\r\n\r\n  getAllBooks = () => {\r\n    BooksAPI.getAll().then((books) => {\r\n      const bookShelves = this.state.shelfTypes.reduce((shelf, shelfType) => {\r\n        shelf[shelfType] = books\r\n          .filter((book) => book.shelf === shelfType)\r\n          .map((book) => book.id);\r\n        return shelf;\r\n      }, {});\r\n      this.setState({ books, bookShelves });\r\n    });\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.getAllBooks();\r\n  };\r\n\r\n  handleMove = (book, shelf) => {\r\n    BooksAPI.update(book, shelf).then((bookShelves) => {\r\n      book.shelf = shelf;\r\n      this.setState({ bookShelves });\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.books.length === 0) {\r\n      return (\r\n        <div className=\"app\">\r\n          <span>Loading...</span>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"app\">\r\n        {this.state.showSearchPage ? (\r\n          <SearchBooks books={this.state.books} handleMove={this.handleMove} />\r\n        ) : (\r\n          <div className=\"list-books\">\r\n            <div className=\"list-books-title\">\r\n              <h1>MyReads</h1>\r\n            </div>\r\n            <div className=\"list-books-content\">\r\n              <div>\r\n                <Bookshelf\r\n                  key={this.state.shelfTypes[0]}\r\n                  books={this.state.books}\r\n                  type={this.state.shelfTypes[0]}\r\n                  BookIDsOnThisShelf={\r\n                    this.state.bookShelves[this.state.shelfTypes[0]]\r\n                  }\r\n                  handleMove={this.handleMove}\r\n                />\r\n                <Bookshelf\r\n                  key={this.state.shelfTypes[1]}\r\n                  books={this.state.books}\r\n                  type={this.state.shelfTypes[1]}\r\n                  BookIDsOnThisShelf={\r\n                    this.state.bookShelves[this.state.shelfTypes[1]]\r\n                  }\r\n                  handleMove={this.handleMove}\r\n                />\r\n                <Bookshelf\r\n                  key={this.state.shelfTypes[2]}\r\n                  books={this.state.books}\r\n                  type={this.state.shelfTypes[2]}\r\n                  BookIDsOnThisShelf={\r\n                    this.state.bookShelves[this.state.shelfTypes[2]]\r\n                  }\r\n                  handleMove={this.handleMove}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"open-search\">\r\n              <button onClick={() => this.setState({ showSearchPage: true })}>\r\n                Add a book\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BooksApp;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}